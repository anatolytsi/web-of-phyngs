/*--------------------------------*- C++ -*----------------------------------*\
=========                 |
\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
\\    /   O peration     | Website:  https://openfoam.org
\\  /    A nd           | Version:  7
\\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
version     2.0;
format      ascii;
class       dictionary;
object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     chtMultiRegionFoam;

startFrom       latestTime;

startTime       0;

endTime         600;

deltaT          1;

writeControl    adjustableRunTime;

writeInterval   1;

purgeWrite      0;

writeFormat     ascii;

writePrecision  8;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

adjustTimeStep  yes;

maxCo           1.0;

maxDi           10.0;

OptimisationSwitches
{
//    // On NFS mounted file system: maximum wait for files to appear/get
//    // updated. Set to 0 on distributed case.
//    fileModificationSkew 10;

//- Modification checking:
//  - timeStamp         : use modification time on file
//  - inotify           : use inotify framework
//  - timeStampMaster   : do time stamp (and file reading) only on master.
//  - inotifyMaster     : do inotify (and file reading) only on master.
fileModificationChecking timeStampMaster;

//- Parallel IO file handler
//  uncollated (default), collated or masterUncollated
fileHandler uncollated;

//- collated: thread buffer size for queued file writes.
//  If set to 0 or not sufficient for the file size threading is not used.
//  Default: 2e9
maxThreadFileBufferSize 2e9;

//- masterUncollated: non-blocking buffer size.
//  If the file exceeds this buffer size scheduled transfer is used.
//  Default: 2e9
maxMasterFileBufferSize 2e9;

commsType       blocking; //nonBlocking; // scheduled; // blocking;
//    floatTransfer   0;
//    nProcsSimpleSum 0;

// Force dumping (at next timestep) upon signal (-1 to disable)
writeNowSignal              -1; // 10;

// Force dumping (at next timestep) and clean exit upon signal
stopAtWriteNowSignal        10; //-1;
}

functions
{
#includeFunc  probes
}

// ************************************************************************* //
